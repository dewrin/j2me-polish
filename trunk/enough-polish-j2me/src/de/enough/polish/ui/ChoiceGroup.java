// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Sat Dec 06 15:06:44 CET 2003
package de.enough.polish.ui;

import javax.microedition.lcdui.*;
import javax.microedition.lcdui.Font;
import javax.microedition.lcdui.Image;

/**
 * A <code>ChoiceGroup</code> is a group of selectable elements intended to be
 * placed within a
 * <A HREF="../../../javax/microedition/lcdui/Form.html"><CODE>Form</CODE></A>. The group may be created with a mode that requires a
 * single choice to be made or that allows multiple choices. The
 * implementation is responsible for providing the graphical representation of
 * these modes and must provide visually different graphics for different
 * modes. For example, it might use &quot;radio buttons&quot; for the
 * single choice
 * mode and &quot;check boxes&quot; for the multiple choice mode.
 * 
 * <p> <strong>Note:</strong> most of the essential methods have been
 * specified in the <A HREF="../../../javax/microedition/lcdui/Choice.html"><CODE>Choice</CODE></A> interface.</p>
 * <HR>
 * 
 * 
 * @since MIDP 1.0
 */
public class ChoiceGroup extends Item implements Choice
{
	//following variables are implicitely defined by getter- or setter-methods:
	private int selectedIndex;
	private boolean[] selectedFlags;
	private int fitPolicy;

	/**
	 * Creates a new, empty <code>ChoiceGroup</code>, specifying its
	 * title and its type.
	 * The type must be one of <code>EXCLUSIVE</code>,
	 * <code>MULTIPLE</code>, or <code>POPUP</code>. The
	 * <code>IMPLICIT</code>
	 * choice type is not allowed within a <code>ChoiceGroup</code>.
	 * 
	 * @param label - the item's label (see Item)
	 * @param choiceType - EXCLUSIVE, MULTIPLE,  or POPUP
	 * @throws IllegalArgumentException - if choiceType is not one of EXCLUSIVE, MULTIPLE, or POPUP
	 * @see Choice#EXCLUSIVE, Choice.MULTIPLE, Choice.IMPLICIT, Choice.POPUP
	 */
	public ChoiceGroup( String label, int choiceType)
	{
		//TODO implement ChoiceGroup
	}

	/**
	 * Creates a new <code>ChoiceGroup</code>, specifying its title,
	 * the type of the
	 * <code>ChoiceGroup</code>, and an array of <code>Strings</code>
	 * and <code>Images</code> to be used as its
	 * initial contents.
	 * 
	 * <p>The type must be one of <code>EXCLUSIVE</code>,
	 * <code>MULTIPLE</code>, or <code>POPUP</code>.  The
	 * <code>IMPLICIT</code>
	 * type is not allowed for <code>ChoiceGroup</code>.</p>
	 * 
	 * <p>The <code>stringElements</code> array must be non-null and
	 * every array element
	 * must also be non-null.  The length of the
	 * <code>stringElements</code> array
	 * determines the number of elements in the <code>ChoiceGroup</code>.  The
	 * <code>imageElements</code> array
	 * may be <code>null</code> to indicate that the
	 * <code>ChoiceGroup</code> elements have no images.
	 * If the
	 * <code>imageElements</code> array is non-null, it must be the
	 * same length as the
	 * <code>stringElements</code> array.  Individual elements of the
	 * <code>imageElements</code> array
	 * may be <code>null</code> in order to indicate the absence of an
	 * image for the
	 * corresponding <code>ChoiceGroup</code> element.  Non-null elements
	 * of the
	 * <code>imageElements</code> array may refer to mutable or
	 * immutable images.</p>
	 * 
	 * @param label - the item's label (see Item)
	 * @param choiceType - EXCLUSIVE, MULTIPLE, or POPUP
	 * @param stringElements - set of strings specifying the string parts of the ChoiceGroup elements
	 * @param imageElements - set of images specifying the image parts of the ChoiceGroup elements
	 * @throws NullPointerException - if stringElements is null or if the stringElements array contains any null elements
	 * @throws IllegalArgumentException - if the imageElements array is non-null and has a different length from the stringElements array
	 *   			 or  if choiceType is not one of EXCLUSIVE, MULTIPLE, or POPUP
	 * @see Choice#EXCLUSIVE, Choice#MULTIPLE, Choice#IMPLICIT, Choice#POPUP
	 */
	public ChoiceGroup( String label, int choiceType, String[] stringElements, Image[] imageElements)
	{
		//TODO implement ChoiceGroup
	}

	/**
	 * Returns the number of elements in the <code>ChoiceGroup</code>.
	 * 
	 * @return the number of elements in the ChoiceGroup
	 * @see Choice#size() in interface Choice
	 */
	public int size()
	{
		return 0;
		//TODO implement size
	}

	/**
	 * Gets the <code>String</code> part of the element referenced by
	 * <code>elementNum</code>.
	 * 
	 * @param elementNum - the index of the element to be queried
	 * @return the string part of the element
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#getString(int) in interface Choice
	 * @see #getImage(int)
	 */
	public String getString(int elementNum)
	{
		return null;
		//TODO implement getString
	}

	/**
	 * Gets the <code>Image</code> part of the element referenced by
	 * <code>elementNum</code>.
	 * 
	 * @param elementNum - the number of the element to be queried
	 * @return the image part of the element, or null if there is no image
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#getImage(int) in interface Choice
	 * @see #getString(int)
	 */
	public Image getImage(int elementNum)
	{
		return null;
		//TODO implement getImage
	}

	/**
	 * Appends an element to the <code>ChoiceGroup</code>.
	 * 
	 * @param stringPart - the string part of the element to be added
	 * @param imagePart - the image part of the element to be added, or null if there is no image part
	 * @return the assigned index of the element
	 * @throws NullPointerException - if stringPart is null
	 * @see Choice#append( String, Image) in interface Choice
	 */
	public int append( String stringPart, Image imagePart)
	{
		return 0;
		//TODO implement append
	}

	/**
	 * Inserts an element into the <code>ChoiceGroup</code> just prior to
	 * the element specified.
	 * 
	 * @param elementNum - the index of the element where insertion is to occur
	 * @param stringPart - the string part of the element to be inserted
	 * @param imagePart - the image part of the element to be inserted, or null if there is no image part
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @throws NullPointerException - if stringPart is null
	 * @see Choice#insert(int, String, Image)  in interface Choice
	 */
	public void insert(int elementNum, String stringPart, Image imagePart)
	{
		//TODO implement insert
	}

	/**
	 * Deletes the element referenced by <code>elementNum</code>.
	 * 
	 * @param elementNum - the index of the element to be deleted
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#delete(int) in interface Choice
	 */
	public void delete(int elementNum)
	{
		//TODO implement delete
	}

	/**
	 * Deletes all elements from this <code>ChoiceGroup</code>.
	 * 
	 * @see Choice#deleteAll() in interface Choice
	 */
	public void deleteAll()
	{
		//TODO implement deleteAll
	}

	/**
	 * Sets the <code>String</code> and <code>Image</code> parts of the
	 * element referenced by <code>elementNum</code>,
	 * replacing the previous contents of the element.
	 * 
	 * @param elementNum - the index of the element to be set
	 * @param stringPart - the string part of the new element
	 * @param imagePart - the image part of the element, or null if there is no image part
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @throws NullPointerException - if stringPart is null
	 * @see Choice#set(int, String, Image) in interface Choice
	 */
	public void set(int elementNum, String stringPart, Image imagePart)
	{
		//TODO implement set
	}

	/**
	 * Gets a boolean value indicating whether this element is selected.
	 * 
	 * @param elementNum - the index of the element to be queried
	 * @return selection state of the element
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#isSelected(int) in interface Choice
	 */
	public boolean isSelected(int elementNum)
	{
		return false;
		//TODO implement isSelected
	}

	/**
	 * Returns the index number of an element in the
	 * <code>ChoiceGroup</code> that is
	 * selected. For <code>ChoiceGroup</code> objects of type
	 * <code>EXCLUSIVE</code> and <code>POPUP</code>
	 * there is at most one element selected, so
	 * this method is useful for determining the user's choice.
	 * Returns <code>-1</code> if
	 * there are no elements in the <code>ChoiceGroup</code>.
	 * 
	 * <p>For <code>ChoiceGroup</code> objects of type
	 * <code>MULTIPLE</code>, this always
	 * returns <code>-1</code> because no
	 * single value can in general represent the state of such a
	 * <code>ChoiceGroup</code>.
	 * To get the complete state of a <code>MULTIPLE</code>
	 * <code>Choice</code>, see <A HREF="../../../javax/microedition/lcdui/ChoiceGroup.html#getSelectedFlags(boolean[])"><CODE>getSelectedFlags</CODE></A>.</p>
	 * 
	 * @return index of selected element, or -1 if none
	 * @see Choice#getSelectedIndex() in interface Choice
	 * @see #setSelectedIndex(int, boolean)
	 */
	public int getSelectedIndex()
	{
		return this.selectedIndex;
	}

	/**
	 * Queries the state of a <code>ChoiceGroup</code> and returns the state of
	 * all elements in the
	 * boolean array
	 * <code>selectedArray_return</code>. <strong>Note:</strong> this
	 * is a result parameter.
	 * It must be at least as long as the size
	 * of the <code>ChoiceGroup</code> as returned by <code>size()</code>.
	 * If the array is longer, the extra
	 * elements are set to <code>false</code>.
	 * 
	 * <p>For <code>ChoiceGroup</code> objects of type
	 * <code>MULTIPLE</code>, any
	 * number of elements may be selected and set to true in the result
	 * array.  For <code>ChoiceGroup</code> objects of type
	 * <code>EXCLUSIVE</code> and <code>POPUP</code>
	 * exactly one element will be selected, unless there are
	 * zero elements in the <code>ChoiceGroup</code>. </p>
	 * 
	 * @param selectedArray_return - array to contain the results
	 * @return the number of selected elements in the ChoiceGroup
	 * @throws IllegalArgumentException - if selectedArray_return is shorter than the size of the ChoiceGroup
	 * @throws NullPointerException - if selectedArray_return is null
	 * @see Choice#getSelectedFlags(boolean[]) in interface Choice
	 * @see #setSelectedFlags(boolean[])
	 */
	public int getSelectedFlags(boolean[] selectedArray_return)
	{
		return 0;
		//TODO implement getSelectedFlags
	}

	/**
	 * For <code>ChoiceGroup</code> objects of type
	 * <code>MULTIPLE</code>, this simply sets an
	 * individual element's selected state.
	 * 
	 * <P>For <code>ChoiceGroup</code> objects of type
	 * <code>EXCLUSIVE</code> and <code>POPUP</code>, this can be used only to
	 * select an element.  That is, the <code> selected </code> parameter must
	 * be <code> true </code>. When an element is selected, the previously
	 * selected element is deselected. If <code> selected </code> is <code>
	 * false </code>, this call is ignored.</P>
	 * 
	 * <p>For both list types, the <code>elementNum</code> parameter
	 * must be within
	 * the range
	 * <code>[0..size()-1]</code>, inclusive. </p>
	 * 
	 * @param elementNum - the number of the element. Indexing of the elements is zero-based
	 * @param selected - the new state of the element true=selected, false=not selected
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#setSelectedIndex(int, boolean) in interface Choice
	 * @see #getSelectedIndex()
	 */
	public void setSelectedIndex(int elementNum, boolean selected)
	{
		//TODO implement setSelectedIndex
	}

	/**
	 * Attempts to set the selected state of every element in the
	 * <code>ChoiceGroup</code>. The array
	 * must be at least as long as the size of the
	 * <code>ChoiceGroup</code>. If the array is
	 * longer, the additional values are ignored. <p>
	 * 
	 * For <code>ChoiceGroup</code> objects of type
	 * <code>MULTIPLE</code>, this sets the selected
	 * state of every
	 * element in the <code>Choice</code>. An arbitrary number of
	 * elements may be selected.
	 * <p>
	 * 
	 * For <code>ChoiceGroup</code> objects of type
	 * <code>EXCLUSIVE</code> and <code>POPUP</code>, exactly one array
	 * element must have the value <code>true</code>. If no element is
	 * <code>true</code>,
	 * the first element
	 * in the <code>Choice</code> will be selected. If two or more
	 * elements are <code>true</code>, the
	 * implementation will choose the first <code>true</code> element
	 * and select it. <p>
	 * 
	 * @param selectedArray - an array in which the method collect the selection status
	 * @throws IllegalArgumentException - if selectedArray is shorter than the size of the ChoiceGroup
	 * @throws NullPointerException - if the selectedArray is null
	 * @see Choice#setSelectedFlags(boolean[]) in interface Choice
	 * @see #getSelectedFlags(boolean[])
	 */
	public void setSelectedFlags(boolean[] selectedArray)
	{
		this.selectedFlags = selectedArray;
	}

	/**
	 * Sets the application's preferred policy for fitting
	 * <code>Choice</code> element
	 * contents to the available screen space. The set policy applies for all
	 * elements of the <code>Choice</code> object.  Valid values are
	 * <A HREF="../../../javax/microedition/lcdui/Choice.html#TEXT_WRAP_DEFAULT"><CODE>Choice.TEXT_WRAP_DEFAULT</CODE></A>, <A HREF="../../../javax/microedition/lcdui/Choice.html#TEXT_WRAP_ON"><CODE>Choice.TEXT_WRAP_ON</CODE></A>,
	 * and <A HREF="../../../javax/microedition/lcdui/Choice.html#TEXT_WRAP_OFF"><CODE>Choice.TEXT_WRAP_OFF</CODE></A>. Fit policy is a hint, and the
	 * implementation may disregard the application's preferred policy.
	 * 
	 * @param fitPolicy - preferred content fit policy for choice elements
	 * @throws IllegalArgumentException - if fitPolicy is invalid
	 * @see Choice#setFitPolicy(int) in interface Choice
	 * @see #getFitPolicy()
	 * @since  MIDP 2.0
	 */
	public void setFitPolicy(int fitPolicy)
	{
		this.fitPolicy = fitPolicy;
	}

	/**
	 * Gets the application's preferred policy for fitting
	 * <code>Choice</code> element
	 * contents to the available screen space.  The value returned is the
	 * policy that had been set by the application, even if that value had
	 * been disregarded by the implementation.
	 * 
	 * @return one of Choice.TEXT_WRAP_DEFAULT, Choice.TEXT_WRAP_ON, or Choice.TEXT_WRAP_OFF
	 * @see Choice#getFitPolicy() in interface Choice
	 * @see #setFitPolicy(int)
	 * @since  MIDP 2.0
	 */
	public int getFitPolicy()
	{
		return this.fitPolicy;
	}

	/**
	 * Sets the application's preferred font for
	 * rendering the specified element of this <code>Choice</code>.
	 * An element's font is a hint, and the implementation may disregard
	 * the application's preferred font.
	 * 
	 * <p> The <code>elementNum</code> parameter must be within the range
	 * <code>[0..size()-1]</code>, inclusive.</p>
	 * 
	 * <p> The <code>font</code> parameter must be a valid <code>Font</code>
	 * object or <code>null</code>. If the <code>font</code> parameter is
	 * <code>null</code>, the implementation must use its default font
	 * to render the element.</p>
	 * 
	 * @param elementNum - the index of the element, starting from zero
	 * @param font - the preferred font to use to render the element
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#setFont(int, Font) in interface Choice
	 * @see #getFont(int)
	 * @since  MIDP 2.0
	 */
	public void setFont(int elementNum, Font font)
	{
		//TODO implement setFont
	}

	/**
	 * Gets the application's preferred font for
	 * rendering the specified element of this <code>Choice</code>. The
	 * value returned is the font that had been set by the application,
	 * even if that value had been disregarded by the implementation.
	 * If no font had been set by the application, or if the application
	 * explicitly set the font to <code>null</code>, the value is the default
	 * font chosen by the implementation.
	 * 
	 * <p> The <code>elementNum</code> parameter must be within the range
	 * <code>[0..size()-1]</code>, inclusive.</p>
	 * 
	 * @param elementNum - the index of the element, starting from zero
	 * @return the preferred font to use to render the element
	 * @throws IndexOutOfBoundsException - if elementNum is invalid
	 * @see Choice#getFont(int) in interface Choice
	 * @see #setFont(int elementNum, Font font)
	 * @since  MIDP 2.0
	 */
	public Font getFont(int elementNum)
	{
		return null;
		//TODO implement getFont
	}

	/* (non-Javadoc)
	 * @see de.enough.polish.ui.Item#paint(int, int, javax.microedition.lcdui.Graphics)
	 */
	public void paint(int x, int y, Graphics g) {
		// TODO Auto-generated method stub
		
	}

}
